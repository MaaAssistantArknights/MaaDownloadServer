// <auto-generated />
using System;
using MaaDownloadServer.Data.Db.Postgres;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace MaaDownloadServer.Data.Db.Postgres.Migrations
{
    [DbContext(typeof(MaaPgSqlDbContext))]
    [Migration("20220528155533_AddAnnounce")]
    partial class AddAnnounce
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("MaaDownloadServer.Data.Base.Entities.Assets.Asset", b =>
                {
                    b.Property<Guid>("EntityId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("BlobEntityId")
                        .HasColumnType("uuid");

                    b.Property<DateTimeOffset>("CreateAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("DownloadCount")
                        .HasColumnType("integer");

                    b.Property<bool>("IsBundle")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<DateTimeOffset>("UpdateAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Url")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("EntityId");

                    b.HasIndex("BlobEntityId");

                    b.ToTable("Assets");
                });

            modelBuilder.Entity("MaaDownloadServer.Data.Base.Entities.Assets.AssetDownloadUrl", b =>
                {
                    b.Property<Guid>("EntityId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("AssetEntityId")
                        .HasColumnType("uuid");

                    b.Property<DateTimeOffset>("CreateAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<int>("Priority")
                        .HasColumnType("integer");

                    b.Property<string>("Url")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("EntityId");

                    b.HasIndex("AssetEntityId");

                    b.ToTable("AssetDownloadUrl");
                });

            modelBuilder.Entity("MaaDownloadServer.Data.Base.Entities.Assets.Blob", b =>
                {
                    b.Property<Guid>("EntityId")
                        .HasColumnType("uuid");

                    b.Property<DateTimeOffset>("CreateAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<string>("Md5")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Path")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Sha1")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTimeOffset>("UpdateAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("EntityId");

                    b.ToTable("Blobs");
                });

            modelBuilder.Entity("MaaDownloadServer.Data.Base.Entities.External.ExternalModule", b =>
                {
                    b.Property<Guid>("EntityId")
                        .HasColumnType("uuid");

                    b.Property<DateTimeOffset>("CreateAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Url")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("EntityId");

                    b.ToTable("ExternalModules");
                });

            modelBuilder.Entity("MaaDownloadServer.Data.Base.Entities.External.ExternalSyncStatus", b =>
                {
                    b.Property<Guid>("EntityId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("AssetEntityId")
                        .HasColumnType("uuid");

                    b.Property<DateTimeOffset>("CreateAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("ExternalModuleEntityId")
                        .HasColumnType("uuid");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<DateTimeOffset?>("LastSync")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTimeOffset>("UpdateAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("EntityId");

                    b.HasIndex("AssetEntityId");

                    b.HasIndex("ExternalModuleEntityId");

                    b.ToTable("ExternalSyncStatus");
                });

            modelBuilder.Entity("MaaDownloadServer.Data.Base.Entities.Map.BlobToAsset", b =>
                {
                    b.Property<Guid>("EntityId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("AssetId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("AssetsEntityId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("BlobId")
                        .HasColumnType("uuid");

                    b.Property<DateTimeOffset>("CreateAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("FilesEntityId")
                        .HasColumnType("uuid");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.HasKey("EntityId");

                    b.HasIndex("AssetId");

                    b.HasIndex("AssetsEntityId");

                    b.HasIndex("BlobId");

                    b.HasIndex("FilesEntityId");

                    b.ToTable("Map_File_Asset", (string)null);
                });

            modelBuilder.Entity("MaaDownloadServer.Data.Base.Entities.Map.BlobToMaaUpAdd", b =>
                {
                    b.Property<Guid>("EntityId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("AddEntityId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("BlobId")
                        .HasColumnType("uuid");

                    b.Property<DateTimeOffset>("CreateAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<Guid>("MaaUpAddEntityId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("MaaUpdateId")
                        .HasColumnType("uuid");

                    b.HasKey("EntityId");

                    b.HasIndex("AddEntityId");

                    b.HasIndex("BlobId");

                    b.HasIndex("MaaUpAddEntityId");

                    b.HasIndex("MaaUpdateId");

                    b.ToTable("Map_Blob_MaaUpAdd", (string)null);
                });

            modelBuilder.Entity("MaaDownloadServer.Data.Base.Entities.Map.BlobToMaaUpRemove", b =>
                {
                    b.Property<Guid>("EntityId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("BlobId")
                        .HasColumnType("uuid");

                    b.Property<DateTimeOffset>("CreateAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<Guid>("MaaUpRemoveEntityId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("MaaUpdateId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("RemoveEntityId")
                        .HasColumnType("uuid");

                    b.HasKey("EntityId");

                    b.HasIndex("BlobId");

                    b.HasIndex("MaaUpRemoveEntityId");

                    b.HasIndex("MaaUpdateId");

                    b.HasIndex("RemoveEntityId");

                    b.ToTable("Map_Blob_MaaUpRemove", (string)null);
                });

            modelBuilder.Entity("MaaDownloadServer.Data.Base.Entities.Map.BlobToMaaUpUpdate", b =>
                {
                    b.Property<Guid>("EntityId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("BlobId")
                        .HasColumnType("uuid");

                    b.Property<DateTimeOffset>("CreateAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<Guid>("MaaUpUpdateEntityId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("MaaUpdateId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("UpdateEntityId")
                        .HasColumnType("uuid");

                    b.HasKey("EntityId");

                    b.HasIndex("BlobId");

                    b.HasIndex("MaaUpUpdateEntityId");

                    b.HasIndex("MaaUpdateId");

                    b.HasIndex("UpdateEntityId");

                    b.ToTable("Map_Blob_MaaUpUpdate", (string)null);
                });

            modelBuilder.Entity("MaaDownloadServer.Data.Base.Entities.Modules.MaaModule", b =>
                {
                    b.Property<Guid>("EntityId")
                        .HasColumnType("uuid");

                    b.Property<DateTimeOffset>("CreateAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Url")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("EntityId");

                    b.ToTable("MaaModules");
                });

            modelBuilder.Entity("MaaDownloadServer.Data.Base.Entities.Modules.MaaPackage", b =>
                {
                    b.Property<Guid>("EntityId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("AssetEntityId")
                        .HasColumnType("uuid");

                    b.Property<DateTimeOffset>("CreateAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<Guid>("MaaModuleEntityId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("MaaVersionEntityId")
                        .HasColumnType("uuid");

                    b.HasKey("EntityId");

                    b.HasIndex("AssetEntityId");

                    b.HasIndex("MaaModuleEntityId");

                    b.HasIndex("MaaVersionEntityId");

                    b.ToTable("MaaPackages");
                });

            modelBuilder.Entity("MaaDownloadServer.Data.Base.Entities.Modules.MaaSyncStatus", b =>
                {
                    b.Property<Guid>("EntityId")
                        .HasColumnType("uuid");

                    b.Property<DateTimeOffset>("CreateAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<DateTimeOffset?>("LastSync")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("LatestVersionEntityId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("MaaModuleEntityId")
                        .HasColumnType("uuid");

                    b.Property<DateTimeOffset>("UpdateAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("EntityId");

                    b.HasIndex("LatestVersionEntityId");

                    b.HasIndex("MaaModuleEntityId");

                    b.ToTable("MaaSyncStatus");
                });

            modelBuilder.Entity("MaaDownloadServer.Data.Base.Entities.Modules.MaaUpdatePackage", b =>
                {
                    b.Property<Guid>("EntityId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("AssetEntityId")
                        .HasColumnType("uuid");

                    b.Property<DateTimeOffset>("CreateAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<Guid>("MaaModuleEntityId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("VersionFromEntityId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("VersionToEntityId")
                        .HasColumnType("uuid");

                    b.HasKey("EntityId");

                    b.HasIndex("AssetEntityId");

                    b.HasIndex("MaaModuleEntityId");

                    b.HasIndex("VersionFromEntityId");

                    b.HasIndex("VersionToEntityId");

                    b.ToTable("MaaUpdatePackages");
                });

            modelBuilder.Entity("MaaDownloadServer.Data.Base.Entities.Modules.MaaVersion", b =>
                {
                    b.Property<Guid>("EntityId")
                        .HasColumnType("uuid");

                    b.Property<string>("ChangeLog")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTimeOffset>("CreateAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<Guid>("MaaModuleEntityId")
                        .HasColumnType("uuid");

                    b.Property<DateTimeOffset>("UpdateTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Version")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("EntityId");

                    b.HasIndex("MaaModuleEntityId");

                    b.ToTable("MaaVersions");
                });

            modelBuilder.Entity("MaaDownloadServer.Data.Base.Entities.Other.Announce", b =>
                {
                    b.Property<Guid>("EntityId")
                        .HasColumnType("uuid");

                    b.Property<DateTimeOffset>("CreateAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTimeOffset>("UpdateAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("EntityId");

                    b.ToTable("Announces");
                });

            modelBuilder.Entity("MaaDownloadServer.Data.Base.Entities.Assets.Asset", b =>
                {
                    b.HasOne("MaaDownloadServer.Data.Base.Entities.Assets.Blob", "Blob")
                        .WithMany()
                        .HasForeignKey("BlobEntityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Blob");
                });

            modelBuilder.Entity("MaaDownloadServer.Data.Base.Entities.Assets.AssetDownloadUrl", b =>
                {
                    b.HasOne("MaaDownloadServer.Data.Base.Entities.Assets.Asset", null)
                        .WithMany("AssetDownloadUrls")
                        .HasForeignKey("AssetEntityId");
                });

            modelBuilder.Entity("MaaDownloadServer.Data.Base.Entities.External.ExternalSyncStatus", b =>
                {
                    b.HasOne("MaaDownloadServer.Data.Base.Entities.Assets.Asset", "Asset")
                        .WithMany()
                        .HasForeignKey("AssetEntityId");

                    b.HasOne("MaaDownloadServer.Data.Base.Entities.External.ExternalModule", "ExternalModule")
                        .WithMany()
                        .HasForeignKey("ExternalModuleEntityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Asset");

                    b.Navigation("ExternalModule");
                });

            modelBuilder.Entity("MaaDownloadServer.Data.Base.Entities.Map.BlobToAsset", b =>
                {
                    b.HasOne("MaaDownloadServer.Data.Base.Entities.Assets.Asset", "Asset")
                        .WithMany()
                        .HasForeignKey("AssetId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MaaDownloadServer.Data.Base.Entities.Assets.Asset", null)
                        .WithMany()
                        .HasForeignKey("AssetsEntityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MaaDownloadServer.Data.Base.Entities.Assets.Blob", "Blob")
                        .WithMany()
                        .HasForeignKey("BlobId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MaaDownloadServer.Data.Base.Entities.Assets.Blob", null)
                        .WithMany()
                        .HasForeignKey("FilesEntityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Asset");

                    b.Navigation("Blob");
                });

            modelBuilder.Entity("MaaDownloadServer.Data.Base.Entities.Map.BlobToMaaUpAdd", b =>
                {
                    b.HasOne("MaaDownloadServer.Data.Base.Entities.Assets.Blob", null)
                        .WithMany()
                        .HasForeignKey("AddEntityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MaaDownloadServer.Data.Base.Entities.Assets.Blob", "Blob")
                        .WithMany()
                        .HasForeignKey("BlobId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MaaDownloadServer.Data.Base.Entities.Modules.MaaUpdatePackage", null)
                        .WithMany()
                        .HasForeignKey("MaaUpAddEntityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MaaDownloadServer.Data.Base.Entities.Modules.MaaUpdatePackage", "MaaUpdatePackage")
                        .WithMany()
                        .HasForeignKey("MaaUpdateId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Blob");

                    b.Navigation("MaaUpdatePackage");
                });

            modelBuilder.Entity("MaaDownloadServer.Data.Base.Entities.Map.BlobToMaaUpRemove", b =>
                {
                    b.HasOne("MaaDownloadServer.Data.Base.Entities.Assets.Blob", "Blob")
                        .WithMany()
                        .HasForeignKey("BlobId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MaaDownloadServer.Data.Base.Entities.Modules.MaaUpdatePackage", null)
                        .WithMany()
                        .HasForeignKey("MaaUpRemoveEntityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MaaDownloadServer.Data.Base.Entities.Modules.MaaUpdatePackage", "MaaUpdatePackage")
                        .WithMany()
                        .HasForeignKey("MaaUpdateId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MaaDownloadServer.Data.Base.Entities.Assets.Blob", null)
                        .WithMany()
                        .HasForeignKey("RemoveEntityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Blob");

                    b.Navigation("MaaUpdatePackage");
                });

            modelBuilder.Entity("MaaDownloadServer.Data.Base.Entities.Map.BlobToMaaUpUpdate", b =>
                {
                    b.HasOne("MaaDownloadServer.Data.Base.Entities.Assets.Blob", "Blob")
                        .WithMany()
                        .HasForeignKey("BlobId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MaaDownloadServer.Data.Base.Entities.Modules.MaaUpdatePackage", null)
                        .WithMany()
                        .HasForeignKey("MaaUpUpdateEntityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MaaDownloadServer.Data.Base.Entities.Modules.MaaUpdatePackage", "MaaUpdatePackage")
                        .WithMany()
                        .HasForeignKey("MaaUpdateId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MaaDownloadServer.Data.Base.Entities.Assets.Blob", null)
                        .WithMany()
                        .HasForeignKey("UpdateEntityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Blob");

                    b.Navigation("MaaUpdatePackage");
                });

            modelBuilder.Entity("MaaDownloadServer.Data.Base.Entities.Modules.MaaPackage", b =>
                {
                    b.HasOne("MaaDownloadServer.Data.Base.Entities.Assets.Asset", "Asset")
                        .WithMany()
                        .HasForeignKey("AssetEntityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MaaDownloadServer.Data.Base.Entities.Modules.MaaModule", "MaaModule")
                        .WithMany()
                        .HasForeignKey("MaaModuleEntityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MaaDownloadServer.Data.Base.Entities.Modules.MaaVersion", "MaaVersion")
                        .WithMany()
                        .HasForeignKey("MaaVersionEntityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Asset");

                    b.Navigation("MaaModule");

                    b.Navigation("MaaVersion");
                });

            modelBuilder.Entity("MaaDownloadServer.Data.Base.Entities.Modules.MaaSyncStatus", b =>
                {
                    b.HasOne("MaaDownloadServer.Data.Base.Entities.Modules.MaaVersion", "LatestVersion")
                        .WithMany()
                        .HasForeignKey("LatestVersionEntityId");

                    b.HasOne("MaaDownloadServer.Data.Base.Entities.Modules.MaaModule", "MaaModule")
                        .WithMany()
                        .HasForeignKey("MaaModuleEntityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("LatestVersion");

                    b.Navigation("MaaModule");
                });

            modelBuilder.Entity("MaaDownloadServer.Data.Base.Entities.Modules.MaaUpdatePackage", b =>
                {
                    b.HasOne("MaaDownloadServer.Data.Base.Entities.Assets.Asset", "Asset")
                        .WithMany()
                        .HasForeignKey("AssetEntityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MaaDownloadServer.Data.Base.Entities.Modules.MaaModule", "MaaModule")
                        .WithMany()
                        .HasForeignKey("MaaModuleEntityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MaaDownloadServer.Data.Base.Entities.Modules.MaaVersion", "VersionFrom")
                        .WithMany()
                        .HasForeignKey("VersionFromEntityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MaaDownloadServer.Data.Base.Entities.Modules.MaaVersion", "VersionTo")
                        .WithMany()
                        .HasForeignKey("VersionToEntityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Asset");

                    b.Navigation("MaaModule");

                    b.Navigation("VersionFrom");

                    b.Navigation("VersionTo");
                });

            modelBuilder.Entity("MaaDownloadServer.Data.Base.Entities.Modules.MaaVersion", b =>
                {
                    b.HasOne("MaaDownloadServer.Data.Base.Entities.Modules.MaaModule", "MaaModule")
                        .WithMany()
                        .HasForeignKey("MaaModuleEntityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("MaaModule");
                });

            modelBuilder.Entity("MaaDownloadServer.Data.Base.Entities.Assets.Asset", b =>
                {
                    b.Navigation("AssetDownloadUrls");
                });
#pragma warning restore 612, 618
        }
    }
}
